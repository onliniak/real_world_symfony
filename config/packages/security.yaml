# config/packages/security.yaml
security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    login:
      pattern: ^/api/users/*
      stateless: true
      json_login:
        check_path: /api/users/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    api:
      pattern: ^/api
      stateless: true
      jwt: ~
    main:
      lazy: true
      provider: app_user_provider

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  # https://github.com/lexik/LexikJWTAuthenticationBundle/blob/2.x/Resources/doc/7-manual-token-creation.md
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/api/users,                   roles: PUBLIC_ACCESS, methods: [ POST ] }
    - { path: ^/api/users/login_check,       roles: PUBLIC_ACCESS, methods: [ POST ] }
    - { path: ^/api/tags,                    roles: PUBLIC_ACCESS }
    - { path: ^/api/user,                    roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/profiles/*/follow,       roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/articles/feed,           roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/articles/,               roles: IS_AUTHENTICATED_FULLY, methods: [ POST, PUT, DELETE ] }
    - { path: ^/api/articles/,               roles: PUBLIC_ACCESS, methods: [ GET ] }
    - { path: ^/api/articles/*/comments,     roles: IS_AUTHENTICATED_FULLY, methods: [ POST ] }
    - { path: ^/api/articles/*/comments/*,   roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/articles/*/favorite,     roles: IS_AUTHENTICATED_FULLY }
